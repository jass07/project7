/*
 * @brief FreeRTOS Blinky example
 *
 * @note
 * Copyright(C) NXP Semiconductors, 2014
 * All rights reserved.
 *
 * @par
 * Software that is described herein is for illustrative purposes only
 * which provides customers with programming information regarding the
 * LPC products.  This software is supplied "AS IS" without any warranties of
 * any kind, and NXP Semiconductors and its licensor disclaim any and
 * all warranties, express or implied, including all implied warranties of
 * merchantability, fitness for a particular purpose and non-infringement of
 * intellectual property rights.  NXP Semiconductors assumes no responsibility
 * or liability for the use of the software, conveys no license or rights under any
 * patent, copyright, mask work right, or any other intellectual property rights in
 * or to any products. NXP Semiconductors reserves the right to make changes
 * in the software without notification. NXP Semiconductors also makes no
 * representation or warranty that such application will be suitable for the
 * specified use without further testing or modification.
 *
 * @par
 * Permission to use, copy, modify, and distribute this software and its
 * documentation is hereby granted, under NXP Semiconductors' and its
 * licensor's relevant copyrights in the software, without fee, provided that it
 * is used in conjunction with NXP Semiconductors microcontrollers.  This
 * copyright, permission, and disclaimer notice must appear in all copies of
 * this code.
 */

#include "board.h"
#include "FreeRTOS.h"
#include "task.h"
#include "queue.h"


xQueueHandle RGB_colour = NULL;

static void prvSetupHardware(void)
{
SystemCoreClockUpdate();
Board_Init();

}

static void tx(void *p)
{


	int R=0;
	while(1)
	{
		xQueueSend(RGB_colour, &R ,1);



		vTaskDelay(200);
	}
}

static void rx(void *p)
{
int item =0;
while(1)
{
xQueueReceive(RGB_colour,&item,1);


}
}
int main(void)
{
prvSetupHardware();


RGB_colour = xQueueCreate( 64, sizeof(int) );
xTaskCreate(tx, (signed char *) "tx",configMINIMAL_STACK_SIZE, NULL, 2,NULL);
xTaskCreate(rx, (signed char *) "rx",configMINIMAL_STACK_SIZE, NULL, 1,NULL);

/* Start the scheduler */
vTaskStartScheduler();
/* Should never arrive here */
return 0;
}

